_8fe‍.x([["deducirMensajeError",()=>deducirMensajeError],["generateRandomString",()=>generateRandomString],["validarEmail",()=>validarEmail],["obtenerDataBase",()=>obtenerDataBase],["enviarEmail",()=>enviarEmail]]);const fs = require('fs');
const rawdata = fs.readFileSync('localconf.json');
const configApp = JSON.parse(rawdata);
const nodemailer = require("nodemailer");

       function deducirMensajeError(o_error){    
    let mensaje = '';
    let hubo = false;
    if(o_error.message){
        mensaje = o_error.message === 'Network Error' ? 'La aplicación no logra conectarse con el servidor, revise si su dispositivo esta con internet o si el servidor esta disponible.' : o_error.message;
        hubo = true;        
    }
    if(o_error.config){
        if(o_error.config.url){
            mensaje = mensaje + "<br><span style='color:red'>" + o_error.config.url + "</span>";
            hubo = true;
        }
    }
    if(hubo === false){
        mensaje = JSON.stringify(o_error);
    }
    return mensaje;
}

       function generateRandomString(num) {
    const characters ='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    let result1= ' ';
    const charactersLength = characters.length;
    for ( let i = 0; i < num; i++ ) {
        result1 += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result1;
}

       function validarEmail(email) {
    if(email.trim().length === 0){
        return false;
    }    
    const emailRegex = /^[-\w.%+]{1,64}@(?:[A-Z0-9-]{1,63}\.){1,125}[A-Z]{2,63}$/i;;
    return emailRegex.test(email);
}

       function obtenerDataBase(codigo_empresa){
    return configApp.databases.find(e => e.codigo_empresa === parseInt(codigo_empresa));
}

       const enviarEmail = async (payload) => {
    const lista = payload.emails.join(', ');   
    const email = configApp.databases.find(e => e.codigo_empresa === payload.codigo_empresa).email;    
    try{
        const transporter = nodemailer.createTransport({
            host: email.host,
            port: email.port,
            secure: email.secure,
            auth: {
                user:email.user,
                pass:email.password
            },
            tls: {                    
                rejectUnauthorized: false,
            },
        });        
        const info = await transporter.sendMail({
            from: payload.from,
            to: lista,
            subject: payload.subject,
            html: payload.message
        });
        return {ok:info.messageId, id:info.messageId, mensaje:''};        
    }catch(error){
        return {ok:false, id:undefined, mensaje:deducirMensajeError(error)};        
    }    
}
